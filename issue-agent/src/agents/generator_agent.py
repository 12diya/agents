import os

from github import Github


def run_generator_agent(data):
    """Processes input data and creates GitHub issues based on quality metrics.

    Args:
        data (dict): Contains issue generation configuration and metrics data.
            Expected keys:
            - create_issues (bool): Whether to create issues
            - ISSUES (list): Existing issues to check against
            - sonar (dict): SonarQube metrics data
    """
    print("****************DATA*******************************")
    print(str(data)[:1000])
    print("****************DATA*******************************")

    if not data.get("create_issues"):
        print("No new issues needed.")
        return

    issues = data.get("ISSUES", []) or []

    # 📊 Structured SonarQube quality check
    sonar_data = data.get("sonar", {})
    coverage = next(
        (
            m.get("value")
            for m in sonar_data.get("metrics", [])
            if m.get("metric") == "coverage"
        ),
        None,
    )
    if coverage:
        try:
            coverage_float = float(coverage)
            if coverage_float < 80:
                already_exists = any(
                    "Low Test Coverage" in issue.get("title", "") for issue in issues
                )
                if not already_exists:
                    issues.append(
                        {
                            "title": "Low Test Coverage",
                            "body": f"Test coverage is below threshold: {coverage_float}%. Please improve test coverage to at least 80%.",
                        }
                    )
        except ValueError:
            print("⚠️ Could not convert coverage value to float:", coverage)

    if not issues:
        print("No issue details found.")
        return

    gh = Github(os.environ["GITHUB_TOKEN"])
    repo = gh.get_repo(os.environ["GITHUB_REPO"])

    if not repo.has_issues:
        print("🚫 Issues are disabled for this repository.")
        return

    label_name = "issue-agent"
    existing_labels = [label.name for label in repo.get_labels()]
    if label_name not in existing_labels:
        repo.create_label(
            name=label_name, color="f29513", description="Auto-generated by Issue Agent"
        )

    for issue in issues:
        title = issue.get("title")
        body = issue.get("body")
        if title and body:
            full_title = f"[Issue Agent] {title}"
            full_body = f"{body}\n\n---\n_This issue was generated automatically by `issue-agent`._"
            repo.create_issue(title=full_title, body=full_body, labels=["issue-agent"])
            print(f"✅ Created issue: {full_title}")
